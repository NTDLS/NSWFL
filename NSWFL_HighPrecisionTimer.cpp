///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//  Copyright Â© NetworkDLS 2023, All rights reserved
//
// THIS CODE AND INFORMATION IS PROVIDED "AS IS" WITHOUT WARRANTY OF 
// ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING BUT NOT LIMITED TO 
// THE IMPLIED WARRANTIES OF MERCHANTABILITY AND/OR FITNESS FOR A 
// PARTICULAR PURPOSE.
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#ifndef _NSWFL_HIGHPRECISIONTIMER_CPP_
#define _NSWFL_HIGHPRECISIONTIMER_CPP_
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#include "NSWFL.H"

#ifdef _USE_GLOBAL_MEMPOOL
extern NSWFL::Memory::MemoryPool *pMem; //pMem must be defined and initalized elsewhere.
#endif

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

namespace NSWFL {
	namespace DateTime {
		///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

		HighPrecisionTimer::HighPrecisionTimer(void)
		{
			this->_bIsHighPrecision = (QueryPerformanceFrequency(&this->_liFrequency) != 0); 
		}

		///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

		void HighPrecisionTimer::Start(void)
		{
			if(this->_bIsHighPrecision)
			{
				QueryPerformanceCounter(&this->_liStart);
			}
			else {
				this->_liStart.QuadPart = GetTickCount();
			}
		}

		///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

		void HighPrecisionTimer::Stop(void)
		{
			if(this->_bIsHighPrecision)
			{
				QueryPerformanceCounter(&this->_liStop);
			}
			else {
				this->_liStop.QuadPart = GetTickCount();
			}
		}

		///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

		double HighPrecisionTimer::Delta(void)
		{
			return this->Calculate(this->_liStart.QuadPart, this->TickCount());
		}

		///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

		__int64 HighPrecisionTimer::Frequency(void)
		{
			if(this->_bIsHighPrecision)
			{
				return this->_liFrequency.QuadPart;
			}
			else {
				return 1;
			}
		}

		///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

		__int64 HighPrecisionTimer::TickCount(void)
		{
			if(this->_bIsHighPrecision)
			{
				LARGE_INTEGER liTickCount;
				QueryPerformanceCounter(&liTickCount);
				return liTickCount.QuadPart;
			}
			else {
				return GetTickCount();
			}
		}

		///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

		double HighPrecisionTimer::Calculate(__int64 i64StartTime, __int64 i64StopTime)
		{
			return ((double) (i64StopTime - i64StartTime) * 1000.0) / (double) this->_liFrequency.QuadPart;
		}

		///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

		double HighPrecisionTimer::Calculate(void)
		{
			return ((double) (this->_liStop.QuadPart - this->_liStart.QuadPart) * 1000.0) / (double) this->_liFrequency.QuadPart;
		}

		///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	} //namespace::DateTime
} //namespace::NSWFL
#endif

